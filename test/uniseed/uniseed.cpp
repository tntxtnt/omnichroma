#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <doctest/doctest.h>

#include "generate.h"
#include "color.h"
#include "coord.h"
#include "omnichroma.h"
#include <BS_thread_pool.hpp>
#include <random>
#include <fmt/format.h>
#include <fmt/ostream.h>
#include <fmt/ranges.h>
#include <iostream>
#include <vector>
#include <boost/unordered_set.hpp>
#include <lodepng.h>
#include "coordset.h"

TEST_CASE("Testing generate shuffled colors function") {
    unsigned int seed = 123;
    std::mt19937 urbg{seed};
    const auto colors = generateShuffledColors<Color>(4, urbg);
    REQUIRE(colors.size() == 4 * 4 * 4);
    const std::vector<Color> expectedColors{
        Color{0x000055}, Color{0xaa55ff}, Color{0x0055ff}, Color{0x000000}, Color{0x55ff55}, Color{0x0000ff},
        Color{0x555555}, Color{0x00ff00}, Color{0xaa55aa}, Color{0xff0000}, Color{0xaaffff}, Color{0xaa0055},
        Color{0x00aa00}, Color{0x005500}, Color{0x550000}, Color{0x00aaff}, Color{0xff5555}, Color{0xaa0000},
        Color{0xaaaaaa}, Color{0xff55aa}, Color{0x55aa00}, Color{0xffffaa}, Color{0xaaffaa}, Color{0xaaaaff},
        Color{0x00aaaa}, Color{0xff5500}, Color{0x5500ff}, Color{0xaa00ff}, Color{0xaa5555}, Color{0xffaa55},
        Color{0xff55ff}, Color{0x005555}, Color{0xff0055}, Color{0xaa5500}, Color{0xff00ff}, Color{0x00ffaa},
        Color{0x55aa55}, Color{0x0000aa}, Color{0x00aa55}, Color{0xffff55}, Color{0xffaaff}, Color{0x55ffaa},
        Color{0xffff00}, Color{0x00ffff}, Color{0xaaff55}, Color{0x5500aa}, Color{0x0055aa}, Color{0x5555ff},
        Color{0x55ff00}, Color{0xaa00aa}, Color{0x555500}, Color{0xff00aa}, Color{0xaaaa55}, Color{0x5555aa},
        Color{0x55aaff}, Color{0xffaa00}, Color{0xffaaaa}, Color{0x55ffff}, Color{0xaaaa00}, Color{0x00ff55},
        Color{0x55aaaa}, Color{0x550055}, Color{0xffffff}, Color{0xaaff00}};
    // fmt::print("{}\n", colors);
    // std::cout << std::flush;
    CHECK(colors == expectedColors);
}

TEST_CASE("Testing coord hash function") {
    std::vector<std::pair<Coord, size_t>> testCases{
        std::make_pair(Coord{0, 0}, 175247769566ULL),
        std::make_pair(Coord{1, 2}, 175247769363ULL),
        std::make_pair(Coord{33, 44}, 175247767297ULL),
        std::make_pair(Coord{123, 456}, 175247760698ULL),
    };
    for (auto& [coord, hash] : testCases) CHECK(std::hash<Coord>{}(coord) == hash);
}

TEST_CASE("Testing coord set names") {
    CHECK(CoordStdUnorderedSet::name() == "sus");
    CHECK(CoordBoostUnorderedSet::name() == "bus");
}

TEST_CASE("Testing omnichroma") {
    const unsigned int seed = 123;
    BS::thread_pool pool;
    fmt::print("Num threads = {}\n", pool.get_thread_count());
    using omnichroma_t = Omnichroma<CoordBoostUnorderedSet>;

    {
        auto img = omnichroma_t::Image8x8();
        img.generate(seed, 4, 4);
        img.savePng();
        const std::string filename1 = img.getFilename() + ".png";
        img.generate(seed, 4, 4, &pool);
        img.savePng();
        const std::string filename2 = img.getFilename() + ".png";

        const std::vector<unsigned char> expected{
            255, 255, 255, 85,  255, 255, 85,  170, 170, 255, 0,   170, 170, 0,   170, 85,  255, 0,   170, 170,
            85,  255, 170, 0,   85,  0,   85,  170, 170, 0,   85,  85,  170, 85,  0,   170, 0,   85,  170, 85,
            170, 255, 170, 255, 85,  255, 255, 0,   0,   255, 85,  85,  85,  0,   255, 170, 170, 85,  255, 170,
            0,   0,   170, 170, 0,   255, 85,  85,  255, 255, 255, 85,  0,   170, 85,  255, 0,   255, 255, 170,
            255, 0,   255, 255, 0,   255, 170, 0,   85,  85,  85,  0,   255, 170, 255, 170, 85,  170, 85,  255,
            85,  255, 255, 0,   85,  170, 85,  0,   170, 255, 0,   0,   170, 170, 170, 170, 255, 255, 255, 170,
            255, 85,  170, 85,  170, 0,   170, 85,  85,  0,   255, 0,   85,  255, 85,  0,   0,   85,  0,   170,
            255, 170, 170, 170, 255, 170, 85,  255, 85,  85,  0,   170, 0,   170, 0,   0,   85,  85,  85,  0,
            0,   0,   170, 85,  255, 0,   0,   255, 255, 85,  0,   0,   85,  0,   170, 0,   85,  255, 0,   0,
            85,  0,   0,   170, 85,  170, 170, 255, 255, 0,   85,  255};
        {
            std::vector<unsigned char> data;
            unsigned int imgW;
            unsigned int imgH;
            lodepng::decode(data, imgW, imgH, filename1, LCT_RGB);
            // fmt::print("{}\n", data);
            // std::cout << std::flush;
            CHECK(imgW == 8);
            CHECK(imgH == 8);
            CHECK(data == expected);
        }
        {
            std::vector<unsigned char> data;
            unsigned int imgW;
            unsigned int imgH;
            lodepng::decode(data, imgW, imgH, filename2, LCT_RGB);
            CHECK(imgW == 8);
            CHECK(imgH == 8);
            CHECK(data == expected);
        }
    }
    {
        auto img = omnichroma_t::Image32x16();
        img.generate(seed, 16, 8);
        img.savePng();
        const std::string filename1 = img.getFilename() + ".png";
        img.generate(seed, 16, 8, &pool);
        img.savePng();
        const std::string filename2 = img.getFilename() + ".png";

        const std::vector<unsigned char> expected{
            182, 109, 218, 182, 182, 109, 182, 72,  72,  182, 145, 109, 255, 145, 72,  255, 109, 109, 109, 36,  36,
            255, 36,  36,  182, 72,  36,  255, 36,  0,   145, 72,  36,  145, 0,   36,  182, 36,  72,  218, 0,   72,
            182, 0,   36,  218, 36,  109, 255, 0,   72,  218, 109, 72,  182, 145, 72,  182, 36,  182, 218, 0,   182,
            255, 0,   182, 255, 36,  255, 255, 0,   109, 36,  255, 182, 36,  218, 145, 0,   255, 109, 72,  218, 182,
            72,  255, 109, 0,   0,   109, 72,  36,  0,   72,  0,   36,  182, 182, 145, 109, 72,  145, 182, 182, 72,
            182, 72,  109, 218, 109, 109, 255, 109, 72,  255, 72,  72,  145, 36,  0,   182, 36,  0,   109, 72,  0,
            255, 109, 36,  218, 109, 36,  72,  0,   0,   145, 0,   182, 182, 0,   145, 182, 0,   72,  218, 72,  72,
            145, 36,  109, 109, 36,  109, 182, 145, 0,   255, 0,   0,   255, 0,   218, 255, 36,  145, 255, 0,   255,
            72,  145, 145, 72,  109, 109, 72,  218, 109, 109, 218, 145, 36,  0,   109, 36,  36,  36,  36,  0,   145,
            72,  36,  72,  72,  72,  36,  145, 145, 0,   109, 36,  182, 182, 109, 72,  255, 255, 72,  218, 36,  0,
            182, 36,  36,  218, 255, 255, 109, 36,  0,   218, 218, 72,  255, 145, 36,  255, 182, 36,  36,  0,   72,
            36,  0,   36,  36,  36,  0,   218, 36,  72,  145, 72,  72,  218, 72,  0,   218, 109, 0,   218, 0,   0,
            182, 0,   0,   255, 109, 218, 255, 36,  182, 145, 72,  255, 72,  145, 109, 36,  145, 72,  36,  109, 72,
            72,  0,   145, 0,   72,  0,   0,   36,  36,  0,   72,  72,  0,   36,  145, 109, 0,   36,  182, 72,  0,
            182, 109, 36,  109, 0,   182, 255, 0,   36,  218, 218, 109, 255, 145, 255, 255, 218, 255, 218, 255, 218,
            182, 255, 72,  218, 255, 72,  255, 218, 36,  72,  36,  36,  145, 0,   0,   36,  0,   0,   145, 72,  0,
            255, 36,  72,  218, 72,  36,  218, 0,   36,  218, 145, 255, 255, 72,  218, 255, 72,  182, 182, 72,  255,
            0,   109, 109, 36,  145, 109, 0,   72,  109, 0,   0,   0,   36,  109, 36,  36,  36,  145, 36,  36,  109,
            0,   0,   36,  109, 109, 36,  109, 109, 72,  109, 0,   0,   109, 36,  72,  72,  0,   182, 255, 145, 0,
            218, 218, 0,   255, 255, 109, 182, 255, 218, 218, 255, 36,  255, 255, 182, 182, 255, 109, 218, 255, 109,
            255, 218, 72,  109, 72,  36,  145, 36,  36,  72,  0,   72,  109, 0,   72,  255, 72,  36,  182, 109, 255,
            255, 72,  255, 145, 0,   255, 182, 72,  218, 72,  109, 145, 36,  109, 109, 0,   72,  145, 36,  72,  36,
            72,  72,  0,   72,  36,  109, 72,  145, 36,  72,  182, 72,  72,  145, 0,   109, 109, 0,   36,  218, 109,
            109, 72,  72,  72,  36,  145, 109, 0,   109, 36,  36,  182, 255, 109, 0,   218, 182, 0,   255, 145, 109,
            218, 182, 109, 182, 218, 109, 218, 255, 145, 218, 218, 36,  218, 182, 36,  218, 182, 72,  145, 0,   109,
            145, 0,   72,  255, 255, 145, 182, 36,  109, 218, 109, 255, 218, 36,  218, 182, 36,  218, 109, 145, 182,
            145, 109, 182, 145, 72,  182, 36,  72,  72,  36,  72,  145, 72,  72,  145, 72,  72,  109, 72,  72,  72,
            36,  145, 0,   0,   145, 0,   36,  145, 36,  145, 218, 145, 36,  72,  109, 36,  0,   182, 72,  72,  182,
            255, 72,  0,   0,   0,   182, 218, 145, 0,   218, 145, 36,  182, 145, 36,  109, 182, 36,  145, 182, 36,
            182, 182, 36,  72,  0,   109, 109, 0,   145, 218, 145, 109, 255, 182, 109, 182, 36,  145, 255, 72,  109,
            218, 72,  182, 218, 109, 218, 72,  109, 182, 0,   109, 145, 218, 145, 145, 255, 145, 182, 218, 109, 145,
            0,   36,  72,  109, 72,  109, 109, 109, 109, 182, 72,  145, 109, 36,  145, 0,   182, 0,   36,  182, 36,
            109, 255, 182, 145, 182, 109, 255, 182, 72,  0,   145, 72,  36,  109, 145, 36,  145, 145, 0,   36,  182,
            36,  36,  255, 145, 109, 0,   145, 145, 36,  72,  36,  218, 145, 109, 72,  72,  36,  182, 145, 109, 109,
            182, 218, 145, 145, 145, 145, 218, 145, 72,  218, 36,  145, 255, 255, 218, 36,  109, 255, 255, 109, 182,
            255, 109, 145, 0,   36,  109, 182, 109, 145, 255, 145, 145, 218, 72,  145, 36,  36,  72,  145, 72,  145,
            145, 36,  145, 182, 109, 109, 0,   218, 0,   72,  218, 0,   109, 255, 145, 109, 218, 255, 72,  182, 109,
            255, 182, 145, 0,   145, 109, 0,   36,  218, 36,  109, 182, 36,  72,  182, 0,   36,  255, 0,   72,  218,
            36,  72,  218, 72,  72,  218, 145, 145, 109, 182, 255, 145, 145, 182, 218, 182, 182, 182, 182, 145, 145,
            182, 255, 182, 218, 0,   145, 36,  145, 255, 0,   182, 255, 255, 182, 218, 72,  109, 255, 0,   0,   145,
            72,  145, 255, 109, 182, 255, 218, 72,  109, 109, 72,  182, 182, 0,   109, 145, 0,   145, 0,   255, 0,
            36,  218, 0,   145, 72,  218, 182, 145, 182, 255, 218, 182, 36,  182, 109, 218, 145, 182, 36,  145, 218,
            145, 255, 218, 255, 109, 255, 0,   72,  182, 36,  36,  218, 255, 218, 218, 218, 182, 218, 218, 255, 182,
            36,  255, 109, 182, 182, 218, 109, 255, 36,  182, 109, 0,   0,   145, 145, 72,  72,  255, 109, 109, 255,
            36,  0,   218, 72,  36,  255, 0,   218, 145, 109, 145, 255, 0,   255, 145, 182, 145, 255, 145, 36,  218,
            109, 36,  218, 72,  0,   218, 218, 0,   109, 145, 72,  109, 36,  255, 0,   182, 72,  182, 255, 182, 182,
            145, 182, 182, 218, 182, 182, 0,   145, 218, 145, 145, 182, 182, 109, 182, 145, 218, 182, 255, 145, 218,
            255, 182, 255, 218, 182, 145, 218, 218, 182, 72,  255, 145, 72,  218, 36,  72,  255, 72,  145, 218, 109,
            218, 36,  36,  145, 36,  72,  0,   182, 72,  0,   72,  255, 36,  0,   255, 0,   182, 145, 0,   0,   255,
            0,   218, 182, 145, 145, 218, 36,  255, 218, 145, 145, 255, 109, 0,   218, 145, 0,   218, 145, 36,  182,
            0,   218, 36,  145, 145, 72,  72,  109, 218, 145, 109, 145, 109, 109, 145, 0,   109, 255, 109, 145, 145,
            72,  218, 218, 109, 182, 182, 218, 109, 182, 182, 218, 182, 218, 218, 145, 109, 255, 72,  145, 255, 72,
            36,  218, 72,  145, 255, 109, 145, 255, 145, 109, 145, 109, 255, 255, 36,  0,   109, 72,  0,   36,  0,
            0,   182, 109, 0,   218, 109, 0,   218, 72,  0,   255, 36,  0,   0,   218, 0,   255, 218, 0,   255, 255,
            36,  255, 255, 182, 145, 218, 109, 0,   255, 72,  0,   255, 218, 0,   255, 0,   182, 36,  36,  218, 255,
            72,  145, 218, 72,  255, 182, 109, 109, 182, 109, 218, 218, 72,  182, 182, 218, 72,  218, 145, 255, 182,
            255, 218, 109, 182, 255, 36,  145, 255, 36,  36,  182, 72,  145, 218, 72,  145, 182, 145, 109, 182, 145,
            182, 218, 36,  72,  109, 72,  0,   0,   72,  0,   109, 0,   36,  182, 145, 0,   255, 182, 36,  218, 182,
            72,  182, 218, 36,  182, 182, 36,  145, 182, 72,  145, 182, 0,   218, 255, 218, 145, 218, 145, 109, 255,
            182, 0,   255, 36,  182, 0,   255, 36,  218, 0,   145, 255, 109, 145, 218, 109, 109, 218, 145, 218, 218,
            182, 0,   182, 218, 36,  182, 218, 72,  255, 255, 218, 145, 218, 255, 0,   145, 218, 36,  72,  218, 72,
            109, 218, 109, 182, 218, 72,  182, 255, 0,   145, 255, 0,   145, 182, 0,   255, 218, 0,   36,  109, 0,
            0,   145, 36,  72,  218, 145, 36,  255, 145, 72,  255, 218, 36,  182, 218, 0,   145, 182, 0,   109, 218,
            36,  109, 218, 255, 255, 255, 0,   182, 218, 0,   218, 218, 109, 72,  255, 182, 36,  255, 72,  182, 0,
            36,  72,  255, 145, 109, 218, 182, 182, 255, 182, 0,   218, 255, 72,  145, 255, 0,   145, 36,  255, 72,
            109, 255, 0,   109, 218, 36,  36,  218, 36,  109, 255, 109, 109, 182, 109, 182, 218, 0,   145, 218, 0,
            109, 182, 0,   255, 182, 0,   36,  72,  0,   255, 255, 0,   0,   109, 36,  72,  145, 72,  72,  182, 145,
            72,  218, 255, 109, 255, 218, 36,  218, 218, 72,  255, 255, 218, 218, 255, 218, 218, 218, 218, 182, 255,
            36,  182, 255, 0,   182, 182, 145, 36,  255, 218, 36,  255, 109, 72,  218, 145, 182, 255, 109, 182, 218,
            218, 0,   218, 255, 36,  109, 72,  255, 36,  72,  255, 0,   109, 218, 72,  36,  255, 36,  0,   255, 72,
            109, 182, 72,  182, 182, 0,   109, 218, 0,   109, 145, 0,   72,  182, 36,  72,  109, 36,  72,  109, 0,
            0,   72,  36,  109, 145, 36,  145, 109, 36,  109, 145, 72,  145, 182, 72,  109, 218, 182, 109, 255, 255,
            182, 255, 255, 145, 255, 255, 145, 218, 255, 182, 218, 218, 182, 218, 255, 72,  182, 255, 0,   109, 182,
            109, 36,  255};
        {
            std::vector<unsigned char> data;
            unsigned int imgW;
            unsigned int imgH;
            lodepng::decode(data, imgW, imgH, filename1, LCT_RGB);
            // fmt::print("{}\n", data);
            // std::cout << std::flush;
            CHECK(imgW == 32);
            CHECK(imgH == 16);
            CHECK(data == expected);
        }
        {
            std::vector<unsigned char> data;
            unsigned int imgW;
            unsigned int imgH;
            lodepng::decode(data, imgW, imgH, filename2, LCT_RGB);
            CHECK(imgW == 32);
            CHECK(imgH == 16);
            CHECK(data == expected);
        }
    }
}